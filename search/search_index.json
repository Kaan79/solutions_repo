{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Projectile Motion: A Theoretical and Computational Study 1. Introduction Projectile motion is a fundamental topic in classical mechanics that describes the motion of an object launched into the air, subject to gravitational acceleration. It plays a crucial role in understanding various real-world phenomena, from the trajectory of a thrown ball to the path of a rocket. The motion of a projectile can be decomposed into independent horizontal and vertical components, governed by well-established kinematic equations. These equations provide valuable insights into the relationship between velocity, acceleration, time, and displacement. This study aims to delve into the mathematical foundations of projectile motion, systematically deriving its governing equations from Newton\u2019s laws of motion. By exploring the dependence of range, time of flight, and maximum height on initial launch conditions, we will demonstrate how these factors interact to shape the projectile\u2019s path. Furthermore, we will analyze how variations in initial velocity, gravitational acceleration, and launch height influence the overall motion, leading to a diverse set of outcomes. A computational approach will be employed to simulate and visualize projectile trajectories, enabling a deeper understanding of the theoretical principles through numerical methods. By combining analytical derivations with computational techniques, we aim to bridge the gap between theoretical physics and real-world applications, demonstrating the practical significance of projectile motion across various disciplines, including sports, engineering, and astrophysics. 2. Governing Equations of Motion Projectile motion is governed by Newton\u2019s laws of motion. To describe its behavior, we break it down into two components: horizontal motion and vertical motion . 2.1 Horizontal Motion The horizontal component of projectile motion is characterized by the absence of acceleration (assuming air resistance is negligible). The velocity in this direction remains constant: [ x = v_0 \\cos(\\theta) t ] where: - ( x ) is the horizontal displacement, - ( v_0 ) is the initial velocity, - ( \\theta ) is the launch angle, - ( t ) is the time elapsed. Since there is no horizontal acceleration: [ v_x = v_0 \\cos(\\theta) ] This means the projectile maintains a constant horizontal velocity throughout its flight. def plot_horizontal_motion(): time = np.linspace(0, 5, 100) x = 5 * time # Constant velocity motion plt.figure(figsize=(8, 6)) plt.plot(time, x, label=\"Horizontal Motion (x = v*t)\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Horizontal Position (m)\") plt.title(\"Horizontal Motion (Constant Velocity)\") plt.legend() plt.grid() plt.savefig(\"horizontal_motion.png\") plt.show() plot_horizontal_motion() 2.2 Vertical Motion In projectile motion, the vertical component is influenced by gravity, which causes the projectile to decelerate as it rises and accelerate as it falls back down. This is due to the gravitational force acting downward, pulling the projectile toward the ground. In projectile motion, the vertical component is influenced by gravity, which causes the projectile to decelerate as it rises and accelerate as it falls back down. This is due to the gravitational force acting downward, pulling the projectile toward the ground. Unlike the horizontal motion, which remains constant (ignoring air resistance), the vertical motion is affected by acceleration due to gravity. This results in a parabolic trajectory, where the object reaches a maximum height before descending back to the ground. Vertical Position The vertical position ( y(t) ) at any given time ( t ) is described by the following kinematic equation: \\[ y(t) = y_0 + v_0 sin(theta) t - \\frac{1}{2} g t^2 \\] Where: - ( y_0 ) is the initial height of the projectile, - ( v_0 \\sin(\\theta) ) is the vertical component of the initial velocity (the vertical velocity at ( t = 0 )), - ( g ) is the acceleration due to gravity (approximately 9.81 m/s\u00b2 ). Vertical Velocity The vertical velocity ( v_y(t) ) at any given time ( t ) is given by: \\[ v_y(t) = v_0 sin(theta) - g t \\] This equation shows that at the start of the motion, the vertical velocity is positive (the object moves upward), but as time progresses, gravity slows down the upward motion. Once the projectile reaches its maximum height, the vertical velocity becomes zero. After that, gravity causes the projectile to accelerate downward. import numpy as np import matplotlib.pyplot as plt # Constants g = 9.81 # Gravity (m/s^2) v0 = 30 # Initial velocity (m/s) theta = 45 # Launch angle (degrees) y0 = 0 # Initial height (m) # Convert angle to radians theta_rad = np.radians(theta) # Initial vertical velocity v0y = v0 * np.sin(theta_rad) # Time array (from t=0 to when projectile hits the ground) t_max = (2 * v0y) / g time = np.linspace(0, t_max, num=100) # Vertical position equation y = y0 + v0y * time - 0.5 * g * time**2 # Plot vertical motion plt.figure(figsize=(8, 6)) plt.plot(time, y, label=r'$y(t) = y_0 + v_{0y} t - \\frac{1}{2} g t^2$', color='b') plt.axhline(0, color='gray', linestyle='--', linewidth=1) # Ground level plt.xlabel(\"Time (s)\") plt.ylabel(\"Vertical Position (m)\") plt.title(\"Vertical Motion of a Projectile\") plt.legend() plt.grid() plt.show() --- ![alt text](image-15.png) ### **2.3 Maximum Height** The projectile reaches its maximum height ( H ) when ( v_y = 0 ): [ 0 = v_0 \\sin(\\theta) - g t_H ] Solving for ( t_H ) (time to reach maximum height): [ t_H = \\frac{v_0 \\sin(\\theta)}{g} ] Substituting this into the vertical displacement equation: [ H = \\frac{(v_0 \\sin(\\theta))^2}{2g} ] def plot_maximum_height(): theta = np.radians(45) # 45-degree launch v0 = 20 # Initial speed g = 9.81 # Define g here t_h = (v0 * np.sin(theta)) / g # Time to reach max height H = (v0**2 * np.sin(theta)**2) / (2 * g) # Maximum height plt.figure(figsize=(8, 6)) time = np.linspace(0, t_h, 100) y = v0 * np.sin(theta) * time - 0.5 * g * time**2 plt.plot(time, y, label=\"Vertical Position vs. Time\") plt.axhline(H, color='r', linestyle=\"--\", label=f\"Max Height = {H:.2f} m\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Height (m)\") plt.title(\"Maximum Height of a Projectile\") plt.legend() plt.grid() plt.savefig(\"maximum_height.png\") plt.show() plot_maximum_height() ![alt text](image-13.png) ### **2.4 Time of Flight** The total time of flight ( T ) is found by setting ( y = 0 ): [ 0 = y_0 + v_0 \\sin(\\theta) T - \\frac{1}{2} g T^2 ] Solving for ( T ), when launched from ground level (( y_0 = 0 )): [ T = \\frac{2 v_0 \\sin(\\theta)}{g} ] For nonzero initial height, a quadratic equation must be solved. --- def plot_time_of_flight(): v0 = 20 theta = np.radians(45) g = 9.81 # Define g within the function T = (2 * v0 * np.sin(theta)) / g # Total flight time time = np.linspace(0, T, 100) y = v0 * np.sin(theta) * time - 0.5 * g * time**2 plt.figure(figsize=(8, 6)) plt.plot(time, y, label=\"Projectile Trajectory\") plt.axvline(T, color='r', linestyle=\"--\", label=f\"Time of Flight = {T:.2f} s\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Height (m)\") plt.title(\"Total Time of Flight\") plt.legend() plt.grid() plt.savefig(\"time_of_flight.png\") plt.show() plot_time_of_flight() ![alt text](image-14.png) ## **3. Analysis of Range Dependence on Launch Angle** The horizontal range ( R ) is given by: [ R = frac{v_0^2 sin(2\\theta)}{g} ] - The range is maximized when ( theta = 45^circ ). - Increasing initial velocity increases the range quadratically. - If the launch height is nonzero, a more complex formula is required. The following Python code simulates the effect of launch angle on range: ```python import numpy as np import matplotlib.pyplot as plt def projectile_range(theta, v0, g=9.81): theta_rad = np.radians(theta) return (v0**2 * np.sin(2 * theta_rad)) / g angles = np.linspace(0, 90, 100) ranges = [projectile_range(theta, 20) for theta in angles] plt.figure(figsize=(10, 5)) plt.plot(angles, ranges, label='Range vs. Angle') plt.xlabel('Launch Angle (degrees)') plt.ylabel('Range (m)') plt.title('Effect of Launch Angle on Range') plt.legend() plt.grid() plt.show() 4. Computational Implementation A computational approach is useful to visualize projectile motion. The following script simulates projectile motion for different launch angles: import numpy as np import matplotlib.pyplot as plt def projectile_trajectory(theta, v0, g=9.81, dt=0.01): theta_rad = np.radians(theta) vx = v0 * np.cos(theta_rad) vy = v0 * np.sin(theta_rad) x, y = [0], [0] while y[-1] >= 0: vy = vy - g * dt x.append(x[-1] + vx * dt) y.append(y[-1] + vy * dt) return x, y angles = [30, 45, 60] plt.figure(figsize=(10, 5)) for angle in angles: x, y = projectile_trajectory(angle, 20) plt.plot(x, y, label=f'\u03b8 = {angle\u00b0') plt.xlabel('Horizontal Distance (m)') plt.ylabel('Vertical Distance (m)') plt.title('Projectile Motion for Different Launch Angles') plt.legend() plt.grid() plt.show() 5. Limitations and Further Considerations Several real-world factors influence projectile motion: 1. Air Resistance : Causes deviation from ideal parabolic trajectory. 2. Wind Effects : Can alter range and direction. 3. Variable Gravity : Relevant for planetary or space applications. A more realistic model requires solving numerical differential equations. 6. Conclusion Projectile motion provides insights into fundamental physics. Key findings include: - The optimal angle for maximum range is 45\u00b0 . - Higher initial velocity increases range quadratically. - Computational simulations confirm theoretical predictions. Expanding this study to include air resistance and wind effects would improve realism and applicability in engineering and physics. This means the projectile maintains a constant horizontal velocity throughout its flight. ### **2.2 Vertical Motion** In contrast to horizontal motion, the vertical component is affected by gravitational acceleration (( g )), causing the projectile to slow down on the way up and speed up on the way down. The vertical position ( y ) at any time ( t ) is given by the kinematic equation: ```math y = y_0 + v_0 sin(theta) t - \\frac{1}{2} g t^2 where: - ( y_0 ) is the initial height of the projectile, - ( v_0 \\sin(\\theta) ) is the initial vertical velocity component. The vertical velocity at any time ( t ) is: v_y = v_0 sin(theta) - g t 2.3 Maximum Height The projectile reaches its maximum height ( H ) when ( v_y = 0 ): 0 = v_0 sin(theta) - g t_H Solving for ( t_H ) (time to reach maximum height): t_H = \\frac{v_0 \\sin(\\theta)}{g} Substituting this into the vertical displacement equation: H = \\frac{(v_0 sin(theta))^2}{2g} 2.4 Time of Flight The total time of flight ( T ) is found by setting ( y = 0 ): 0 = y_0 + v_0 sin(theta) T - \\frac{1}{2} g T^2 Solving for ( T ), when launched from ground level (( y_0 = 0 )): T = \\frac{2 v_0 sin(theta)}{g} For nonzero initial height, a quadratic equation must be solved. 3. Analysis of Range Dependence on Launch Angle The horizontal range ( R ) is given by: R = \\frac{v_0^2 sin(2theta)}{g} The range is maximized when ( \\theta = 45^\\circ ). Increasing initial velocity increases the range quadratically. If the launch height is nonzero, a more complex formula is required. The following Python code simulates the effect of launch angle on range: import numpy as np import matplotlib.pyplot as plt def projectile_range(theta, v0, g=9.81): theta_rad = np.radians(theta) return (v0**2 * np.sin(2 * theta_rad)) / g angles = np.linspace(0, 90, 100) ranges = [projectile_range(theta, 20) for theta in angles] plt.figure(figsize=(10, 5)) plt.plot(angles, ranges, label='Range vs. Angle') plt.xlabel('Launch Angle (degrees)') plt.ylabel('Range (m)') plt.title('Effect of Launch Angle on Range') plt.legend() plt.grid() plt.show() 4. Computational Implementation A computational approach is useful to visualize projectile motion. The following script simulates projectile motion for different launch angles: import numpy as np import matplotlib.pyplot as plt def projectile_trajectory(theta, v0, g=9.81, dt=0.01): theta_rad = np.radians(theta) vx = v0 * np.cos(theta_rad) vy = v0 * np.sin(theta_rad) x, y = [0], [0] while y[-1] >= 0: vy = vy - g * dt x.append(x[-1] + vx * dt) y.append(y[-1] + vy * dt) return x, y angles = [30, 45, 60] plt.figure(figsize=(10, 5)) for angle in angles: x, y = projectile_trajectory(angle, 20) plt.plot(x, y, label=f'\u03b8 = {angle}\u00b0') plt.xlabel('Horizontal Distance (m)') plt.ylabel('Vertical Distance (m)') plt.title('Projectile Motion for Different Launch Angles') plt.legend() plt.grid() plt.show() 5. Limitations and Further Considerations Several real-world factors influence projectile motion: 1. Air Resistance : Causes deviation from ideal parabolic trajectory. 2. Wind Effects : Can alter range and direction. 3. Variable Gravity : Relevant for planetary or space applications. A more realistic model requires solving numerical differential equations. 6. Conclusion Projectile motion provides insights into fundamental physics. Key findings include: - The optimal angle for maximum range is 45\u00b0 . - Higher initial velocity increases range quadratically. - Computational simulations confirm theoretical predictions. Expanding this study to include air resistance and wind effects would improve realism and applicability in engineering and physics. ```","title":"Projectile Motion: A Theoretical and Computational Study"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#projectile-motion-a-theoretical-and-computational-study","text":"","title":"Projectile Motion: A Theoretical and Computational Study"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-introduction","text":"Projectile motion is a fundamental topic in classical mechanics that describes the motion of an object launched into the air, subject to gravitational acceleration. It plays a crucial role in understanding various real-world phenomena, from the trajectory of a thrown ball to the path of a rocket. The motion of a projectile can be decomposed into independent horizontal and vertical components, governed by well-established kinematic equations. These equations provide valuable insights into the relationship between velocity, acceleration, time, and displacement. This study aims to delve into the mathematical foundations of projectile motion, systematically deriving its governing equations from Newton\u2019s laws of motion. By exploring the dependence of range, time of flight, and maximum height on initial launch conditions, we will demonstrate how these factors interact to shape the projectile\u2019s path. Furthermore, we will analyze how variations in initial velocity, gravitational acceleration, and launch height influence the overall motion, leading to a diverse set of outcomes. A computational approach will be employed to simulate and visualize projectile trajectories, enabling a deeper understanding of the theoretical principles through numerical methods. By combining analytical derivations with computational techniques, we aim to bridge the gap between theoretical physics and real-world applications, demonstrating the practical significance of projectile motion across various disciplines, including sports, engineering, and astrophysics.","title":"1. Introduction"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-governing-equations-of-motion","text":"Projectile motion is governed by Newton\u2019s laws of motion. To describe its behavior, we break it down into two components: horizontal motion and vertical motion .","title":"2. Governing Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#21-horizontal-motion","text":"The horizontal component of projectile motion is characterized by the absence of acceleration (assuming air resistance is negligible). The velocity in this direction remains constant: [ x = v_0 \\cos(\\theta) t ] where: - ( x ) is the horizontal displacement, - ( v_0 ) is the initial velocity, - ( \\theta ) is the launch angle, - ( t ) is the time elapsed. Since there is no horizontal acceleration: [ v_x = v_0 \\cos(\\theta) ] This means the projectile maintains a constant horizontal velocity throughout its flight. def plot_horizontal_motion(): time = np.linspace(0, 5, 100) x = 5 * time # Constant velocity motion plt.figure(figsize=(8, 6)) plt.plot(time, x, label=\"Horizontal Motion (x = v*t)\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Horizontal Position (m)\") plt.title(\"Horizontal Motion (Constant Velocity)\") plt.legend() plt.grid() plt.savefig(\"horizontal_motion.png\") plt.show() plot_horizontal_motion()","title":"2.1 Horizontal Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#22-vertical-motion","text":"In projectile motion, the vertical component is influenced by gravity, which causes the projectile to decelerate as it rises and accelerate as it falls back down. This is due to the gravitational force acting downward, pulling the projectile toward the ground. In projectile motion, the vertical component is influenced by gravity, which causes the projectile to decelerate as it rises and accelerate as it falls back down. This is due to the gravitational force acting downward, pulling the projectile toward the ground. Unlike the horizontal motion, which remains constant (ignoring air resistance), the vertical motion is affected by acceleration due to gravity. This results in a parabolic trajectory, where the object reaches a maximum height before descending back to the ground.","title":"2.2 Vertical Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#vertical-position","text":"The vertical position ( y(t) ) at any given time ( t ) is described by the following kinematic equation: \\[ y(t) = y_0 + v_0 sin(theta) t - \\frac{1}{2} g t^2 \\] Where: - ( y_0 ) is the initial height of the projectile, - ( v_0 \\sin(\\theta) ) is the vertical component of the initial velocity (the vertical velocity at ( t = 0 )), - ( g ) is the acceleration due to gravity (approximately 9.81 m/s\u00b2 ).","title":"Vertical Position"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#vertical-velocity","text":"The vertical velocity ( v_y(t) ) at any given time ( t ) is given by: \\[ v_y(t) = v_0 sin(theta) - g t \\] This equation shows that at the start of the motion, the vertical velocity is positive (the object moves upward), but as time progresses, gravity slows down the upward motion. Once the projectile reaches its maximum height, the vertical velocity becomes zero. After that, gravity causes the projectile to accelerate downward. import numpy as np import matplotlib.pyplot as plt # Constants g = 9.81 # Gravity (m/s^2) v0 = 30 # Initial velocity (m/s) theta = 45 # Launch angle (degrees) y0 = 0 # Initial height (m) # Convert angle to radians theta_rad = np.radians(theta) # Initial vertical velocity v0y = v0 * np.sin(theta_rad) # Time array (from t=0 to when projectile hits the ground) t_max = (2 * v0y) / g time = np.linspace(0, t_max, num=100) # Vertical position equation y = y0 + v0y * time - 0.5 * g * time**2 # Plot vertical motion plt.figure(figsize=(8, 6)) plt.plot(time, y, label=r'$y(t) = y_0 + v_{0y} t - \\frac{1}{2} g t^2$', color='b') plt.axhline(0, color='gray', linestyle='--', linewidth=1) # Ground level plt.xlabel(\"Time (s)\") plt.ylabel(\"Vertical Position (m)\") plt.title(\"Vertical Motion of a Projectile\") plt.legend() plt.grid() plt.show() --- ![alt text](image-15.png) ### **2.3 Maximum Height** The projectile reaches its maximum height ( H ) when ( v_y = 0 ): [ 0 = v_0 \\sin(\\theta) - g t_H ] Solving for ( t_H ) (time to reach maximum height): [ t_H = \\frac{v_0 \\sin(\\theta)}{g} ] Substituting this into the vertical displacement equation: [ H = \\frac{(v_0 \\sin(\\theta))^2}{2g} ] def plot_maximum_height(): theta = np.radians(45) # 45-degree launch v0 = 20 # Initial speed g = 9.81 # Define g here t_h = (v0 * np.sin(theta)) / g # Time to reach max height H = (v0**2 * np.sin(theta)**2) / (2 * g) # Maximum height plt.figure(figsize=(8, 6)) time = np.linspace(0, t_h, 100) y = v0 * np.sin(theta) * time - 0.5 * g * time**2 plt.plot(time, y, label=\"Vertical Position vs. Time\") plt.axhline(H, color='r', linestyle=\"--\", label=f\"Max Height = {H:.2f} m\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Height (m)\") plt.title(\"Maximum Height of a Projectile\") plt.legend() plt.grid() plt.savefig(\"maximum_height.png\") plt.show() plot_maximum_height() ![alt text](image-13.png) ### **2.4 Time of Flight** The total time of flight ( T ) is found by setting ( y = 0 ): [ 0 = y_0 + v_0 \\sin(\\theta) T - \\frac{1}{2} g T^2 ] Solving for ( T ), when launched from ground level (( y_0 = 0 )): [ T = \\frac{2 v_0 \\sin(\\theta)}{g} ] For nonzero initial height, a quadratic equation must be solved. --- def plot_time_of_flight(): v0 = 20 theta = np.radians(45) g = 9.81 # Define g within the function T = (2 * v0 * np.sin(theta)) / g # Total flight time time = np.linspace(0, T, 100) y = v0 * np.sin(theta) * time - 0.5 * g * time**2 plt.figure(figsize=(8, 6)) plt.plot(time, y, label=\"Projectile Trajectory\") plt.axvline(T, color='r', linestyle=\"--\", label=f\"Time of Flight = {T:.2f} s\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Height (m)\") plt.title(\"Total Time of Flight\") plt.legend() plt.grid() plt.savefig(\"time_of_flight.png\") plt.show() plot_time_of_flight() ![alt text](image-14.png) ## **3. Analysis of Range Dependence on Launch Angle** The horizontal range ( R ) is given by: [ R = frac{v_0^2 sin(2\\theta)}{g} ] - The range is maximized when ( theta = 45^circ ). - Increasing initial velocity increases the range quadratically. - If the launch height is nonzero, a more complex formula is required. The following Python code simulates the effect of launch angle on range: ```python import numpy as np import matplotlib.pyplot as plt def projectile_range(theta, v0, g=9.81): theta_rad = np.radians(theta) return (v0**2 * np.sin(2 * theta_rad)) / g angles = np.linspace(0, 90, 100) ranges = [projectile_range(theta, 20) for theta in angles] plt.figure(figsize=(10, 5)) plt.plot(angles, ranges, label='Range vs. Angle') plt.xlabel('Launch Angle (degrees)') plt.ylabel('Range (m)') plt.title('Effect of Launch Angle on Range') plt.legend() plt.grid() plt.show()","title":"Vertical Velocity"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#_1","text":"","title":""},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-computational-implementation","text":"A computational approach is useful to visualize projectile motion. The following script simulates projectile motion for different launch angles: import numpy as np import matplotlib.pyplot as plt def projectile_trajectory(theta, v0, g=9.81, dt=0.01): theta_rad = np.radians(theta) vx = v0 * np.cos(theta_rad) vy = v0 * np.sin(theta_rad) x, y = [0], [0] while y[-1] >= 0: vy = vy - g * dt x.append(x[-1] + vx * dt) y.append(y[-1] + vy * dt) return x, y angles = [30, 45, 60] plt.figure(figsize=(10, 5)) for angle in angles: x, y = projectile_trajectory(angle, 20) plt.plot(x, y, label=f'\u03b8 = {angle\u00b0') plt.xlabel('Horizontal Distance (m)') plt.ylabel('Vertical Distance (m)') plt.title('Projectile Motion for Different Launch Angles') plt.legend() plt.grid() plt.show()","title":"4. Computational Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-limitations-and-further-considerations","text":"Several real-world factors influence projectile motion: 1. Air Resistance : Causes deviation from ideal parabolic trajectory. 2. Wind Effects : Can alter range and direction. 3. Variable Gravity : Relevant for planetary or space applications. A more realistic model requires solving numerical differential equations.","title":"5. Limitations and Further Considerations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#6-conclusion","text":"Projectile motion provides insights into fundamental physics. Key findings include: - The optimal angle for maximum range is 45\u00b0 . - Higher initial velocity increases range quadratically. - Computational simulations confirm theoretical predictions. Expanding this study to include air resistance and wind effects would improve realism and applicability in engineering and physics. This means the projectile maintains a constant horizontal velocity throughout its flight. ### **2.2 Vertical Motion** In contrast to horizontal motion, the vertical component is affected by gravitational acceleration (( g )), causing the projectile to slow down on the way up and speed up on the way down. The vertical position ( y ) at any time ( t ) is given by the kinematic equation: ```math y = y_0 + v_0 sin(theta) t - \\frac{1}{2} g t^2 where: - ( y_0 ) is the initial height of the projectile, - ( v_0 \\sin(\\theta) ) is the initial vertical velocity component. The vertical velocity at any time ( t ) is: v_y = v_0 sin(theta) - g t","title":"6. Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#23-maximum-height","text":"The projectile reaches its maximum height ( H ) when ( v_y = 0 ): 0 = v_0 sin(theta) - g t_H Solving for ( t_H ) (time to reach maximum height): t_H = \\frac{v_0 \\sin(\\theta)}{g} Substituting this into the vertical displacement equation: H = \\frac{(v_0 sin(theta))^2}{2g}","title":"2.3 Maximum Height"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#24-time-of-flight","text":"The total time of flight ( T ) is found by setting ( y = 0 ): 0 = y_0 + v_0 sin(theta) T - \\frac{1}{2} g T^2 Solving for ( T ), when launched from ground level (( y_0 = 0 )): T = \\frac{2 v_0 sin(theta)}{g} For nonzero initial height, a quadratic equation must be solved.","title":"2.4 Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-analysis-of-range-dependence-on-launch-angle","text":"The horizontal range ( R ) is given by: R = \\frac{v_0^2 sin(2theta)}{g} The range is maximized when ( \\theta = 45^\\circ ). Increasing initial velocity increases the range quadratically. If the launch height is nonzero, a more complex formula is required. The following Python code simulates the effect of launch angle on range: import numpy as np import matplotlib.pyplot as plt def projectile_range(theta, v0, g=9.81): theta_rad = np.radians(theta) return (v0**2 * np.sin(2 * theta_rad)) / g angles = np.linspace(0, 90, 100) ranges = [projectile_range(theta, 20) for theta in angles] plt.figure(figsize=(10, 5)) plt.plot(angles, ranges, label='Range vs. Angle') plt.xlabel('Launch Angle (degrees)') plt.ylabel('Range (m)') plt.title('Effect of Launch Angle on Range') plt.legend() plt.grid() plt.show()","title":"3. Analysis of Range Dependence on Launch Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#_2","text":"","title":""},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-computational-implementation_1","text":"A computational approach is useful to visualize projectile motion. The following script simulates projectile motion for different launch angles: import numpy as np import matplotlib.pyplot as plt def projectile_trajectory(theta, v0, g=9.81, dt=0.01): theta_rad = np.radians(theta) vx = v0 * np.cos(theta_rad) vy = v0 * np.sin(theta_rad) x, y = [0], [0] while y[-1] >= 0: vy = vy - g * dt x.append(x[-1] + vx * dt) y.append(y[-1] + vy * dt) return x, y angles = [30, 45, 60] plt.figure(figsize=(10, 5)) for angle in angles: x, y = projectile_trajectory(angle, 20) plt.plot(x, y, label=f'\u03b8 = {angle}\u00b0') plt.xlabel('Horizontal Distance (m)') plt.ylabel('Vertical Distance (m)') plt.title('Projectile Motion for Different Launch Angles') plt.legend() plt.grid() plt.show()","title":"4. Computational Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#_3","text":"","title":""},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-limitations-and-further-considerations_1","text":"Several real-world factors influence projectile motion: 1. Air Resistance : Causes deviation from ideal parabolic trajectory. 2. Wind Effects : Can alter range and direction. 3. Variable Gravity : Relevant for planetary or space applications. A more realistic model requires solving numerical differential equations.","title":"5. Limitations and Further Considerations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#6-conclusion_1","text":"Projectile motion provides insights into fundamental physics. Key findings include: - The optimal angle for maximum range is 45\u00b0 . - Higher initial velocity increases range quadratically. - Computational simulations confirm theoretical predictions. Expanding this study to include air resistance and wind effects would improve realism and applicability in engineering and physics. ```","title":"6. Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Mathematical Analysis of the Forced Damped Pendulum 1. Theoretical Foundation A forced damped pendulum represents a system under the influence of an external force while experiencing frictional damping. The equation governing this system is: \\[ \\frac{d^2theta}{dt^2} + beta \\frac{dtheta}{dt} + \\frac{g}{L} sintheta = A cos(omega t) \\] Where: - ( \\theta ) : Angular position (in radians) - ( \\beta ) : Damping coefficient - ( g ) : Gravitational acceleration - ( L ) : Length of the pendulum - ( A ) : Amplitude of the external forcing - ( \\omega ) : Angular frequency of the external force Small-Angle Approximation If ( \\theta ) is small, we can use the approximation ( \\sin\\theta \\approx \\theta ), reducing the equation to: \\[ \\frac{d^2 theta}{dt^2} + beta \\frac{d theta}{dt} + \\frac{g}{L} theta = A cos(omega t) \\] This linear differential equation can be analyzed using analytical methods. 2. Analysis of Dynamics To understand the system's behavior, we analyze the following factors: Damping Coefficient (( \\beta )) : Determines how quickly oscillations diminish. Driving Force (( A )) and Frequency ( \\omega ) : Affect whether the system enters resonance or exhibits chaotic motion. Phase Transitions and Chaos : Under certain parameter values, the system may become chaotic. 3. Real-World Applications The forced damped pendulum model is applicable in various physical systems: - Energy Harvesting Devices - Oscillations in Bridges and Buildings - Electrical Circuits (e.g., RLC circuits) - Biomechanics (Human Motion) 4. Implementation: Python Simulation To observe the system's behavior over time, we can use Python to numerically solve the equations: import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g = 9.81 # Gravitational acceleration (m/s^2) L = 1.0 # Pendulum length (m) beta = 0.2 # Damping coefficient A = 1.2 # Forcing amplitude omega = 2.0 # Forcing frequency def forced_damped_pendulum(t, y): theta, omega_dot = y dtheta_dt = omega_dot domega_dt = -beta * omega_dot - (g / L) * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Initial conditions y0 = [0.2, 0.0] t_span = (0, 20) t_eval = np.linspace(t_span[0], t_span[1], 1000) # Solve the equation solution = solve_ivp(forced_damped_pendulum, t_span, y0, t_eval=t_eval) # Plot results plt.figure(figsize=(10, 5)) plt.plot(solution.t, solution.y[0], label='Angular Position (\u03b8)') plt.xlabel('Time (s)') plt.ylabel('\u03b8 (radians)') plt.title('Forced Damped Pendulum Motion') plt.legend() plt.grid() plt.show() 5. Phase Portraits and Chaos Transitions To analyze chaotic behavior, we can visualize phase portraits (Poincar\u00e9 sections). The following plot represents the phase space motion: plt.figure(figsize=(8, 6)) plt.plot(solution.y[0], solution.y[1], label='Phase Portrait') plt.xlabel('\u03b8 (radians)') plt.ylabel('d\u03b8/dt (Angular velocity)') plt.title('Phase Portrait') plt.legend() plt.grid() plt.show() 6. Conclusions and Insights Higher damping results in the system reaching equilibrium without oscillations. Near resonance frequency , large amplitude oscillations occur. Increasing forcing amplitude may lead to chaotic transitions. This analysis provides a powerful model for applications in engineering and natural sciences. By using Markdown, we can document and explore the pendulum system\u2019s dynamics in depth.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#mathematical-analysis-of-the-forced-damped-pendulum","text":"","title":"Mathematical Analysis of the Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"A forced damped pendulum represents a system under the influence of an external force while experiencing frictional damping. The equation governing this system is: \\[ \\frac{d^2theta}{dt^2} + beta \\frac{dtheta}{dt} + \\frac{g}{L} sintheta = A cos(omega t) \\] Where: - ( \\theta ) : Angular position (in radians) - ( \\beta ) : Damping coefficient - ( g ) : Gravitational acceleration - ( L ) : Length of the pendulum - ( A ) : Amplitude of the external forcing - ( \\omega ) : Angular frequency of the external force","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"If ( \\theta ) is small, we can use the approximation ( \\sin\\theta \\approx \\theta ), reducing the equation to: \\[ \\frac{d^2 theta}{dt^2} + beta \\frac{d theta}{dt} + \\frac{g}{L} theta = A cos(omega t) \\] This linear differential equation can be analyzed using analytical methods.","title":"Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"To understand the system's behavior, we analyze the following factors: Damping Coefficient (( \\beta )) : Determines how quickly oscillations diminish. Driving Force (( A )) and Frequency ( \\omega ) : Affect whether the system enters resonance or exhibits chaotic motion. Phase Transitions and Chaos : Under certain parameter values, the system may become chaotic.","title":"2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-real-world-applications","text":"The forced damped pendulum model is applicable in various physical systems: - Energy Harvesting Devices - Oscillations in Bridges and Buildings - Electrical Circuits (e.g., RLC circuits) - Biomechanics (Human Motion)","title":"3. Real-World Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-implementation-python-simulation","text":"To observe the system's behavior over time, we can use Python to numerically solve the equations: import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g = 9.81 # Gravitational acceleration (m/s^2) L = 1.0 # Pendulum length (m) beta = 0.2 # Damping coefficient A = 1.2 # Forcing amplitude omega = 2.0 # Forcing frequency def forced_damped_pendulum(t, y): theta, omega_dot = y dtheta_dt = omega_dot domega_dt = -beta * omega_dot - (g / L) * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Initial conditions y0 = [0.2, 0.0] t_span = (0, 20) t_eval = np.linspace(t_span[0], t_span[1], 1000) # Solve the equation solution = solve_ivp(forced_damped_pendulum, t_span, y0, t_eval=t_eval) # Plot results plt.figure(figsize=(10, 5)) plt.plot(solution.t, solution.y[0], label='Angular Position (\u03b8)') plt.xlabel('Time (s)') plt.ylabel('\u03b8 (radians)') plt.title('Forced Damped Pendulum Motion') plt.legend() plt.grid() plt.show()","title":"4. Implementation: Python Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#5-phase-portraits-and-chaos-transitions","text":"To analyze chaotic behavior, we can visualize phase portraits (Poincar\u00e9 sections). The following plot represents the phase space motion: plt.figure(figsize=(8, 6)) plt.plot(solution.y[0], solution.y[1], label='Phase Portrait') plt.xlabel('\u03b8 (radians)') plt.ylabel('d\u03b8/dt (Angular velocity)') plt.title('Phase Portrait') plt.legend() plt.grid() plt.show()","title":"5. Phase Portraits and Chaos Transitions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#6-conclusions-and-insights","text":"Higher damping results in the system reaching equilibrium without oscillations. Near resonance frequency , large amplitude oscillations occur. Increasing forcing amplitude may lead to chaotic transitions. This analysis provides a powerful model for applications in engineering and natural sciences. By using Markdown, we can document and explore the pendulum system\u2019s dynamics in depth.","title":"6. Conclusions and Insights"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem Deriving Kepler's Third Law for Circular Orbits 1. Theoretical Foundation Kepler's Third Law states that the square of a planet\u2019s orbital period is proportional to the cube of its orbital radius: \\[ T^2 propto R^3 \\] We derive this relationship using Newton's Law of Gravitation and circular motion dynamics. Newton's Law of Gravitation The gravitational force between two masses ( M ) and ( m ) is given by: \\[ F = \\frac{G M m}{R^2} \\] where: - ( G ) is the gravitational constant, - ( R ) is the orbital radius. For a circular orbit, the gravitational force provides the necessary centripetal force: \\[ \\frac{G M m}{R^2} = m \\frac{v^2}{R} \\] Canceling ( m ) and solving for orbital velocity ( v ): \\[ v^2 = \\frac{G M}{R} \\] Using the relation between velocity and period (( v = \\frac{2\\pi R}{T} )): \\[ left(\\frac{2pi R}{T}right)^2 = \\frac{G M}{R} \\] Rearranging: \\[ T^2 = \\frac{4 pi^2}{G M} R^3 \\] Thus, we confirm that ( T^2 \\propto R^3 ). 2. Implications for Astronomy Used to estimate planetary masses and distances. Helps predict satellite and exoplanet orbits. Important in celestial mechanics and space navigation. 3. Real-World Examples Moon's orbit around Earth : Applying Kepler\u2019s Law allows us to estimate the mass of Earth. Planets in the Solar System : All planets obey this law, confirming Newtonian gravity. 4. Python Simulation To verify the relationship, we simulate circular orbits. import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 # Gravitational constant (m^3 kg^-1 s^-2) M = 1.989e30 # Mass of the Sun (kg) # Define orbital radii (in AU, converted to meters) au = 1.496e11 # 1 Astronomical Unit in meters radii = np.array([0.39, 0.72, 1.0, 1.52, 5.2, 9.58, 19.18, 30.07]) * au # Compute periods using Kepler's Third Law periods = np.sqrt((4 * np.pi**2 * radii**3) / (G * M)) # Convert periods to years periods_years = periods / (60 * 60 * 24 * 365) # Plot plt.figure(figsize=(8,6)) plt.loglog(radii/au, periods_years, 'bo-', label='Simulated Data') plt.xlabel('Orbital Radius (AU)') plt.ylabel('Orbital Period (years)') plt.title(\"Kepler's Third Law: T\u00b2 vs R\u00b3\") plt.legend() plt.grid(True, which='both', linestyle='--') plt.show() 5. Extending to Elliptical Orbits Kepler\u2019s law applies to elliptical orbits by considering the semi-major axis instead of the radius. Used in astrodynamics to analyze non-circular planetary motion. 6. Conclusion Kepler\u2019s Third Law is fundamental in celestial mechanics. Observational verification confirms Newtonian gravity. Extends to exoplanetary systems and astrophysics applications.","title":"Problem"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem","text":"","title":"Problem"},{"location":"1%20Physics/2%20Gravity/Problem_1/#deriving-keplers-third-law-for-circular-orbits","text":"","title":"Deriving Kepler's Third Law for Circular Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-theoretical-foundation","text":"Kepler's Third Law states that the square of a planet\u2019s orbital period is proportional to the cube of its orbital radius: \\[ T^2 propto R^3 \\] We derive this relationship using Newton's Law of Gravitation and circular motion dynamics.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#newtons-law-of-gravitation","text":"The gravitational force between two masses ( M ) and ( m ) is given by: \\[ F = \\frac{G M m}{R^2} \\] where: - ( G ) is the gravitational constant, - ( R ) is the orbital radius. For a circular orbit, the gravitational force provides the necessary centripetal force: \\[ \\frac{G M m}{R^2} = m \\frac{v^2}{R} \\] Canceling ( m ) and solving for orbital velocity ( v ): \\[ v^2 = \\frac{G M}{R} \\] Using the relation between velocity and period (( v = \\frac{2\\pi R}{T} )): \\[ left(\\frac{2pi R}{T}right)^2 = \\frac{G M}{R} \\] Rearranging: \\[ T^2 = \\frac{4 pi^2}{G M} R^3 \\] Thus, we confirm that ( T^2 \\propto R^3 ).","title":"Newton's Law of Gravitation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-implications-for-astronomy","text":"Used to estimate planetary masses and distances. Helps predict satellite and exoplanet orbits. Important in celestial mechanics and space navigation.","title":"2. Implications for Astronomy"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-real-world-examples","text":"Moon's orbit around Earth : Applying Kepler\u2019s Law allows us to estimate the mass of Earth. Planets in the Solar System : All planets obey this law, confirming Newtonian gravity.","title":"3. Real-World Examples"},{"location":"1%20Physics/2%20Gravity/Problem_1/#4-python-simulation","text":"To verify the relationship, we simulate circular orbits. import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 # Gravitational constant (m^3 kg^-1 s^-2) M = 1.989e30 # Mass of the Sun (kg) # Define orbital radii (in AU, converted to meters) au = 1.496e11 # 1 Astronomical Unit in meters radii = np.array([0.39, 0.72, 1.0, 1.52, 5.2, 9.58, 19.18, 30.07]) * au # Compute periods using Kepler's Third Law periods = np.sqrt((4 * np.pi**2 * radii**3) / (G * M)) # Convert periods to years periods_years = periods / (60 * 60 * 24 * 365) # Plot plt.figure(figsize=(8,6)) plt.loglog(radii/au, periods_years, 'bo-', label='Simulated Data') plt.xlabel('Orbital Radius (AU)') plt.ylabel('Orbital Period (years)') plt.title(\"Kepler's Third Law: T\u00b2 vs R\u00b3\") plt.legend() plt.grid(True, which='both', linestyle='--') plt.show()","title":"4. Python Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#5-extending-to-elliptical-orbits","text":"Kepler\u2019s law applies to elliptical orbits by considering the semi-major axis instead of the radius. Used in astrodynamics to analyze non-circular planetary motion.","title":"5. Extending to Elliptical Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#6-conclusion","text":"Kepler\u2019s Third Law is fundamental in celestial mechanics. Observational verification confirms Newtonian gravity. Extends to exoplanetary systems and astrophysics applications.","title":"6. Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}